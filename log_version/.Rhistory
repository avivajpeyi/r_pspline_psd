setwd("G:/My Drive/ResearchExp/PsplinesExperiments/logpsplinePsd_AR")
library(Rcpp)
sourceCpp("internalFunctions.cpp")
sourceCpp("internal_beyondWhittle.cpp")
source("internal_gibbs_core.R")
source("internal_gibbs_s3.R")
source("gibbs_pspline.R")
source("internal_gibbs_util.R")
source("gibbs_pspline_postProposal.R")
source("internal_psdsPlot_s3.R")
source("gibbs_pspline_simple.R")
source("otherFunctions.R")
# Generate AR(4) data
n = 256;
set.seed(1);
data = arima.sim(n, model = list(ar = c(0.9, -0.9, 0.9, -0.9)));
data = data - mean(data);
# Run MCMC (may take some time)
#mcmc  = gibbs_pspline(data, 30000, 5000, 10, eqSpacedKnots = FALSE)
mcmc = gibbs_pspline(data, 100000, 50000, 10, amh=TRUE)
omega  <- 2 * (1:(n / 2 + 1) - 1) / n;
lambda <- omega * pi;
freq = 2 * pi / n * (1:(n / 2 + 1) - 1)[-c(1, n / 2 + 1)]  # Remove first and last frequency
psd.trueAR4 = psd_arma(freq, ar = c(0.9, -0.9, 0.9, -0.9), ma =0,
sigma2 = 1)  # True PSD
burnin = 2500;
thin   = 1;
N      = length(mcmc$ll.trace); N;
index  = seq(burnin+1, N, by = thin)
ts.plot(mcmc$ll.trace[index])
ts.plot(mcmc$V[20,index])
ts.plot(mcmc$tau[index])
ts.plot(mcmc$phi[index])
ts.plot(mcmc$delta[index])
ts.plot(mcmc$V[25, index])
plot(mcmc$V[17,index],mcmc$V[21,index])
post = mcmc$fpsd.sample[, index];
m    = apply(post, 1, median);
# Transformed versions of these for uniform CI construction
log.fpsd.sample <- post
log.fpsd.s    <- apply(log.fpsd.sample, 1, stats::median);
log.fpsd.mad  <- apply(log.fpsd.sample, 1, stats::mad);
log.fpsd.help <- apply(log.fpsd.sample, 1, uniformmax);
log.Cvalue    <- stats::quantile(log.fpsd.help, 0.9);
# Compute Uniform CIs
psd.u95 <- log.fpsd.s + log.Cvalue * log.fpsd.mad;
psd.u05 <- log.fpsd.s - log.Cvalue * log.fpsd.mad;
plot(lambda[-c(1, length(lambda))], log(psd.trueAR4), type = "l",
ylim = c(min(psd.u05[-c(1, length(lambda))]),
max(psd.u95[-c(1, length(lambda))])),
xlab = "Frequency", ylab = "log psd",
main = "AR(4) case - n=256", col = "gray");
lines(lambda[-c(1, length(lambda))], m[-c(1, length(m))]);
lines(lambda[-c(1, length(lambda))], psd.u05[-c(1, length(lambda))], lty = 2);
lines(lambda[-c(1, length(lambda))], psd.u95[-c(1, length(lambda))], lty = 2);
